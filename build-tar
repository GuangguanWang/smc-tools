#!/bin/bash

version=`head -1 README.smctools | cut -c 12-16`;

# Consistency check: Do we have an entry in the History section...?
if [ `grep -A 20 "Release History:" README.smctools | grep "$version" | wc -l` -eq 0 ]; then
	echo "Error: 'README.smctools' is missing an entry for version '$version' in 'Release History' ";
	exit 4;
fi

# Consistency check: git branch
sref=git symbolic-ref HEAD;
if [ "${sref##*}" != "master" ]; then
	echo;
	echo "WARNING: Building package on non-master branch.";
	echo "         Packages for publication MUST be built on the master branch!";
	echo;
fi

if [ -e smc-tools.$version.tar.gz ]; then
	echo "Removing old package...";
	rm smc-tools.$version.tar.gz;
fi
echo "Building smc-tools $version";
build_dir=tmp/smc-tools-$version;
if [ ! -e tmp ]; then
	mkdir tmp;
fi
if [ -e $build_dir ]; then
	rm -rf $build_dir;
fi
mkdir $build_dir;
cp smctools_common.h $build_dir
cp smc.h $build_dir
cp smc_diag.h $build_dir;
cp smc_pnet.c $build_dir;
cp smcss.c $build_dir;
cp ld_pre_smc.c $build_dir;
cp Makefile $build_dir;
cp LICENSE $build_dir;
cp README.smctools $build_dir;
cp af_smc.7 $build_dir;
cp smcss.8 $build_dir;
cp smc_pnet.8 $build_dir;
cp smc_run.in $build_dir;
cp smc_run.8 $build_dir;

cd tmp;
tar -zcvf ../smc-tools-$version.tar.gz smc-tools-$version | sed 's/^/   /';
if [ $? -eq 0 ]; then
	echo "Package smc-tools-$version.tar.gz build successful";
else
	echo "Package smc-tools-$version.tar.gz build failed";
fi

